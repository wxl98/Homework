#include"Sort2.h"
int main()
{
	int k,select,select1;
	SqList L;
	SLList SLL;
	clock_t start,finish;//用于计数排序时间
	double t0,t1,t2,t3,t4,t5,t6,t7,t8,t9;
	cout<<"请选择按提示选择操作："<<endl;
	cout<<"1:显示每种排序算法对不同样本所花的时间\n2:用相同样本对不同算法进行测试\n0:结束程序"<<endl;
	cin>>select1 ;
	while(select1!=0)
{
	if(select1==1)
	{
		cout<<"1:直接插入排序"<<endl<<"2:希尔排序"<<endl<<"3:冒泡排序"<<endl
		<<"4:快速排序"<<endl<<"5:选择排序"<<endl<<"6:堆排序"<<endl
		<<"7:归并排序"<<endl<<"8:基数排序"<<endl<<"0:结束"<<endl;
		cin>>k;
		while(k!=0)
		{
			if(k==1)
			{
				InitList(L,"Data0.txt");
				start=clock();
				InsertSort(L);
				finish=clock();
				t0=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data1.txt");
				start=clock();
				InsertSort(L);
				finish=clock();
				t1=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data2.txt");
				start=clock();
				InsertSort(L);
				finish=clock();
				t2=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data3.txt");
				start=clock();
				InsertSort(L);
				finish=clock();
				t3=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data4.txt");
				start=clock();
				InsertSort(L);
				finish=clock();
				t4=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data5.txt");
				start=clock();
				InsertSort(L);
				finish=clock();
				t5=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data6.txt");
				start=clock();
				InsertSort(L);
				finish=clock();
				t6=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data7.txt");
				start=clock();
				InsertSort(L);
				finish=clock();
				t7=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data8.txt");
				start=clock();
				InsertSort(L);
				finish=clock();
				t8=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data9.txt");
				start=clock();
				InsertSort(L);
				finish=clock();
				t9=(double)(finish-start)/CLOCKS_PER_SEC;
				printf("样本0排序所用时间为：%lfs\n",t0);
				printf("样本1排序所用时间为：%lfs\n",t1);
				printf("样本2排序所用时间为：%lfs\n",t2);
				printf("样本3排序所用时间为：%lfs\n",t3);
				printf("样本4排序所用时间为：%lfs\n",t4);
				printf("样本5排序所用时间为：%lfs\n",t5);
				printf("样本6排序所用时间为：%lfs\n",t6);
				printf("样本7排序所用时间为：%lfs\n",t7);
				printf("样本8排序所用时间为：%lfs\n",t8);
				printf("样本9排序所用时间为：%lfs\n",t9);
			}
			else if(k==2)
			{
				InitList(L,"Data0.txt");
				start=clock();
				ShellSort(L,d,14);
				finish=clock();
				t0=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data1.txt");
				start=clock();
				ShellSort(L,d,14);
				finish=clock();
				t1=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data2.txt");
				start=clock();
				ShellSort(L,d,14);
				finish=clock();
				t2=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data3.txt");
				start=clock();
				ShellSort(L,d,14);
				finish=clock();
				t3=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data4.txt");
				start=clock();
				ShellSort(L,d,14);
				finish=clock();
				t4=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data5.txt");
				start=clock();
				ShellSort(L,d,14);
				finish=clock();
				t5=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data6.txt");
				start=clock();
				ShellSort(L,d,14);
				finish=clock();
				t6=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data7.txt");
				start=clock();
				ShellSort(L,d,14);
				finish=clock();
				t7=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data8.txt");
				start=clock();
				ShellSort(L,d,14);
				finish=clock();
				t8=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data9.txt");
				start=clock();
				ShellSort(L,d,14);
				finish=clock();
				t9=(double)(finish-start)/CLOCKS_PER_SEC;
				printf("样本0排序所用时间为：%lfs\n",t0);
				printf("样本1排序所用时间为：%lfs\n",t1);
				printf("样本2排序所用时间为：%lfs\n",t2);
				printf("样本3排序所用时间为：%lfs\n",t3);
				printf("样本4排序所用时间为：%lfs\n",t4);
				printf("样本5排序所用时间为：%lfs\n",t5);
				printf("样本6排序所用时间为：%lfs\n",t6);
				printf("样本7排序所用时间为：%lfs\n",t7);
				printf("样本8排序所用时间为：%lfs\n",t8);
				printf("样本9排序所用时间为：%lfs\n",t9);
			}
			else if(k==3)
			{
				InitList(L,"Data0.txt");
				start=clock();
				BubbleSort(L);
				finish=clock();
				t0=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data1.txt");
				start=clock();
				BubbleSort(L);
				finish=clock();
				t1=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data2.txt");
				start=clock();
				BubbleSort(L);
				finish=clock();
				t2=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data3.txt");
				start=clock();
				BubbleSort(L);
				finish=clock();
				t3=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data4.txt");
				start=clock();
				BubbleSort(L);
				finish=clock();
				t4=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data5.txt");
				start=clock();
				BubbleSort(L);
				finish=clock();
				t5=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data6.txt");
				start=clock();
				BubbleSort(L);
				finish=clock();
				t6=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data7.txt");
				start=clock();
				BubbleSort(L);
				finish=clock();
				t7=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data8.txt");
				start=clock();
				BubbleSort(L);
				finish=clock();
				t8=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data9.txt");
				start=clock();
				BubbleSort(L);
				finish=clock();
				t9=(double)(finish-start)/CLOCKS_PER_SEC;
				printf("样本0排序所用时间为：%lfs\n",t0);
				printf("样本1排序所用时间为：%lfs\n",t1);
				printf("样本2排序所用时间为：%lfs\n",t2);
				printf("样本3排序所用时间为：%lfs\n",t3);
				printf("样本4排序所用时间为：%lfs\n",t4);
				printf("样本5排序所用时间为：%lfs\n",t5);
				printf("样本6排序所用时间为：%lfs\n",t6);
				printf("样本7排序所用时间为：%lfs\n",t7);
				printf("样本8排序所用时间为：%lfs\n",t8);
				printf("样本9排序所用时间为：%lfs\n",t9);
			}
			else if(k==4)
			{
				InitList(L,"Data0.txt");
				start=clock();
				QuickSort(L);
				finish=clock();
				t0=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data1.txt");
				start=clock();
				QuickSort(L);
				finish=clock();
				t1=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data2.txt");
				start=clock();
				QuickSort(L);
				finish=clock();
				t2=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data3.txt");
				start=clock();
				QuickSort(L);
				finish=clock();
				t3=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data4.txt");
				start=clock();
				QuickSort(L);
				finish=clock();
				t4=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data5.txt");
				start=clock();
				QuickSort(L);
				finish=clock();
				t5=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data6.txt");
				start=clock();
				QuickSort(L);
				finish=clock();
				t6=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data7.txt");
				start=clock();
				QuickSort(L);
				finish=clock();
				t7=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data8.txt");
				start=clock();
				QuickSort(L);
				finish=clock();
				t8=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data9.txt");
				start=clock();
				QuickSort(L);
				finish=clock();
				t9=(double)(finish-start)/CLOCKS_PER_SEC;
				printf("样本0排序所用时间为：%lfs\n",t0);
				printf("样本1排序所用时间为：%lfs\n",t1);
				printf("样本2排序所用时间为：%lfs\n",t2);
				printf("样本3排序所用时间为：%lfs\n",t3);
				printf("样本4排序所用时间为：%lfs\n",t4);
				printf("样本5排序所用时间为：%lfs\n",t5);
				printf("样本6排序所用时间为：%lfs\n",t6);
				printf("样本7排序所用时间为：%lfs\n",t7);
				printf("样本8排序所用时间为：%lfs\n",t8);
				printf("样本9排序所用时间为：%lfs\n",t9);
			}
			else if(k==5)
			{
				InitList(L,"Data0.txt");
				start=clock();
				SelectSort(L);
				finish=clock();
				t0=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data1.txt");
				start=clock();
				SelectSort(L);
				finish=clock();
				t1=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data2.txt");
				start=clock();
				SelectSort(L);
				finish=clock();
				t2=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data3.txt");
				start=clock();
				SelectSort(L);
				finish=clock();
				t3=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data4.txt");
				start=clock();
				SelectSort(L);
				finish=clock();
				t4=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data5.txt");
				start=clock();
				SelectSort(L);
				finish=clock();
				t5=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data6.txt");
				start=clock();
				SelectSort(L);
				finish=clock();
				t6=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data7.txt");
				start=clock();
				SelectSort(L);
				finish=clock();
				t7=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data8.txt");
				start=clock();
				SelectSort(L);
				finish=clock();
				t8=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data9.txt");
				start=clock();
				SelectSort(L);
				finish=clock();
				t9=(double)(finish-start)/CLOCKS_PER_SEC;
				printf("样本0排序所用时间为：%lfs\n",t0);
				printf("样本1排序所用时间为：%lfs\n",t1);
				printf("样本2排序所用时间为：%lfs\n",t2);
				printf("样本3排序所用时间为：%lfs\n",t3);
				printf("样本4排序所用时间为：%lfs\n",t4);
				printf("样本5排序所用时间为：%lfs\n",t5);
				printf("样本6排序所用时间为：%lfs\n",t6);
				printf("样本7排序所用时间为：%lfs\n",t7);
				printf("样本8排序所用时间为：%lfs\n",t8);
				printf("样本9排序所用时间为：%lfs\n",t9);
			}
			else if(k==6)
			{
				InitList(L,"Data0.txt");
				start=clock();
				HeapSort(L);
				finish=clock();
				t0=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data1.txt");
				start=clock();
				HeapSort(L);
				finish=clock();
				t1=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data2.txt");
				start=clock();
				HeapSort(L);
				finish=clock();
				t2=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data3.txt");
				start=clock();
				HeapSort(L);
				finish=clock();
				t3=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data4.txt");
				start=clock();
				HeapSort(L);
				finish=clock();
				t4=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data5.txt");
				start=clock();
				HeapSort(L);
				finish=clock();
				t5=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data6.txt");
				start=clock();
				HeapSort(L);
				finish=clock();
				t6=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data7.txt");
				start=clock();
				HeapSort(L);
				finish=clock();
				t7=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data8.txt");
				start=clock();
				HeapSort(L);
				finish=clock();
				t8=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data9.txt");
				start=clock();
				HeapSort(L);
				finish=clock();
				t9=(double)(finish-start)/CLOCKS_PER_SEC;
				printf("样本0排序所用时间为：%lfs\n",t0);
				printf("样本1排序所用时间为：%lfs\n",t1);
				printf("样本2排序所用时间为：%lfs\n",t2);
				printf("样本3排序所用时间为：%lfs\n",t3);
				printf("样本4排序所用时间为：%lfs\n",t4);
				printf("样本5排序所用时间为：%lfs\n",t5);
				printf("样本6排序所用时间为：%lfs\n",t6);
				printf("样本7排序所用时间为：%lfs\n",t7);
				printf("样本8排序所用时间为：%lfs\n",t8);
				printf("样本9排序所用时间为：%lfs\n",t9);
			}
			else if(k==7)
			{
				InitList(L,"Data0.txt");
				start=clock();
				MergeSort(L);
				finish=clock();
				t0=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data1.txt");
				start=clock();
				MergeSort(L);
				finish=clock();
				t1=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data2.txt");
				start=clock();
				MergeSort(L);
				finish=clock();
				t2=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data3.txt");
				start=clock();
				MergeSort(L);
				finish=clock();
				t3=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data4.txt");
				start=clock();
				MergeSort(L);
				finish=clock();
				t4=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data5.txt");
				start=clock();
				MergeSort(L);
				finish=clock();
				t5=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data6.txt");
				start=clock();
				MergeSort(L);
				finish=clock();
				t6=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data7.txt");
				start=clock();
				MergeSort(L);
				finish=clock();
				t7=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data8.txt");
				start=clock();
				MergeSort(L);
				finish=clock();
				t8=(double)(finish-start)/CLOCKS_PER_SEC;
				InitList(L,"Data9.txt");
				start=clock();
				MergeSort(L);
				finish=clock();
				t9=(double)(finish-start)/CLOCKS_PER_SEC;
				printf("样本0排序所用时间为：%lfs\n",t0);
				printf("样本1排序所用时间为：%lfs\n",t1);
				printf("样本2排序所用时间为：%lfs\n",t2);
				printf("样本3排序所用时间为：%lfs\n",t3);
				printf("样本4排序所用时间为：%lfs\n",t4);
				printf("样本5排序所用时间为：%lfs\n",t5);
				printf("样本6排序所用时间为：%lfs\n",t6);
				printf("样本7排序所用时间为：%lfs\n",t7);
				printf("样本8排序所用时间为：%lfs\n",t8);
				printf("样本9排序所用时间为：%lfs\n",t9);
			}
			else if(k==8)
			{
				InitSLList(SLL,"Data0.txt");
				start=clock();
				RadixSort(SLL);
				finish=clock();
				t0=(double)(finish-start)/CLOCKS_PER_SEC;
				InitSLList(SLL,"Data1.txt");
				start=clock();
				RadixSort(SLL);
				finish=clock();
				t1=(double)(finish-start)/CLOCKS_PER_SEC;
				InitSLList(SLL,"Data2.txt");
				start=clock();
				RadixSort(SLL);
				finish=clock();
				t2=(double)(finish-start)/CLOCKS_PER_SEC;
				InitSLList(SLL,"Data3.txt");
				start=clock();
				RadixSort(SLL);
				finish=clock();
				t3=(double)(finish-start)/CLOCKS_PER_SEC;
				InitSLList(SLL,"Data4.txt");
				start=clock();
				RadixSort(SLL);
				finish=clock();
				t4=(double)(finish-start)/CLOCKS_PER_SEC;
				InitSLList(SLL,"Data5.txt");
				start=clock();
				RadixSort(SLL);
				finish=clock();
				t5=(double)(finish-start)/CLOCKS_PER_SEC;
				InitSLList(SLL,"Data6.txt");
				start=clock();
				RadixSort(SLL);
				finish=clock();
				t6=(double)(finish-start)/CLOCKS_PER_SEC;
				InitSLList(SLL,"Data7.txt");
				start=clock();
				RadixSort(SLL);
				finish=clock();
				t7=(double)(finish-start)/CLOCKS_PER_SEC;
				InitSLList(SLL,"Data8.txt");
				start=clock();
				RadixSort(SLL);
				finish=clock();
				t8=(double)(finish-start)/CLOCKS_PER_SEC;
				InitSLList(SLL,"Data9.txt");
				start=clock();
				RadixSort(SLL);
				finish=clock();
				t9=(double)(finish-start)/CLOCKS_PER_SEC;
				printf("样本0排序所用时间为：%lfs\n",t0);
				printf("样本1排序所用时间为：%lfs\n",t1);
				printf("样本2排序所用时间为：%lfs\n",t2);
				printf("样本3排序所用时间为：%lfs\n",t3);
				printf("样本4排序所用时间为：%lfs\n",t4);
				printf("样本5排序所用时间为：%lfs\n",t5);
				printf("样本6排序所用时间为：%lfs\n",t6);
				printf("样本7排序所用时间为：%lfs\n",t7);
				printf("样本8排序所用时间为：%lfs\n",t8);
				printf("样本9排序所用时间为：%lfs\n",t9);
			}
			cout<<"1:直接插入排序"<<endl<<"2:希尔排序"<<endl<<"3:冒泡排序"<<endl
			<<"4:快速排序"<<endl<<"5:选择排序"<<endl<<"6:堆排序"<<endl
			<<"7:归并排序"<<endl<<"8:基数排序"<<endl<<"0:结束"<<endl;
			cin>>k;
		}
	}
	else if(select1==2)
	{
		string a;
		cout<<"请输入样本文件名:\n";
		cin>>a;
		InitList(L,a);
		start=clock();
		InsertSort(L);
		finish=clock();
		t1=(double)(finish-start);
		InitList(L,a);
		start=clock();
		ShellSort(L,d,14);
		finish=clock();
		t2=(double)(finish-start);
		InitList(L,a);
		start=clock();
		BubbleSort(L);
		finish=clock();
		t3=(double)(finish-start);
		InitList(L,a);
		start=clock();
		QuickSort(L);
		finish=clock();
		t4=(double)(finish-start);
		InitList(L,a);
		start=clock();
		SelectSort(L);
		finish=clock();
		t5=(double)(finish-start);
		InitList(L,a);
		start=clock();
		HeapSort(L);
		finish=clock();
		t6=(double)(finish-start);
		InitList(L,a);
		start=clock();
		MergeSort(L);
		finish=clock();
		t7=(double)(finish-start);
		InitSLList(SLL,a);
		start=clock();
		RadixSort(SLL);
		finish=clock();
		t8=(double)(finish-start);
		cout<<"该样本不同排序所花时间为："<<endl;
		printf("直接插入排序所用时间为：%lfms\n",t1);
		printf("希尔排序所用时间为：%lfms\n",t2);
		printf("冒泡排序所用时间为：%lfms\n",t3);
		printf("快速排序所用时间为：%lfms\n",t4);
		printf("选择排序所用时间为：%lfms\n",t5);
		printf("堆排序所用时间为：%lfms\n",t6);
		printf("归并排序所用时间为：%lfms\n",t7);
		printf("基数排序所用时间为：%lfms\n",t8);
	}
	cout<<"请选择按提示选择操作："<<endl;
	cout<<"1:显示每种排序算法对不同样本所花的时间\n2:用相同样本对不同算法进行测试\n0:结束程序"<<endl;
	cin>>select1 ;
}
	return 0;
}
